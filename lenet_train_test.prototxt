name: "SVHN"

layer {
  name: "SVHN"
  type: "ImageData"
  top: "data"
  top: "label"
  
  transform_param {
    
	scale: 0.00390625
  }
  
  image_data_param {
    source: "D:/Su/bro_Phat_guide/Color Transform/data_train.txt"
    batch_size: 128
    
  }
}

##########################################

layer {
  name: "conv1_tc"
  type: "Convolution"
  bottom: "data"
  top: "conv1_tc"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 32
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
	  #Imagine that your weights are initially very close to 0.
		#What happens is that the signals shrink as it goes through each layer until it becomes too tiny to be useful.
		#Now if your weights are too big, the signals grow at each layer it passes through until it is too massive to be useful.
		#By using Xavier initialization, we make sure that the weights are not too small but not too big to propagate accurately the signal
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1_tc"
  type: "Pooling"
  bottom: "conv1_tc"
  top: "pool1_tc"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "relu1_tc"
  type: "ReLU"
  bottom: "pool1_tc"
  top: "relu1_tc"
}

layer {
  name: "conv2_tc"
  type: "Convolution"
  bottom: "relu1_tc"
  top: "conv2_tc"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 64
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}


layer {
  name: "pool2_tc"
  type: "Pooling"
  bottom: "conv2_tc"
  top: "pool2_tc"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "relu2_tc"
  type: "ReLU"
  bottom: "pool2_tc"
  top: "relu2_tc"
}



layer {
  name: "conv3_tc"
  type: "Convolution"
  bottom: "relu2_tc"
  top: "conv3_tc"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 128
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool3_tc"
  type: "Pooling"
  bottom: "conv3_tc"
  top: "pool3_tc"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "relu3_tc"
  type: "ReLU"
  bottom: "pool3_tc"
  top: "relu3_tc"
}


layer {
  name: "ip1_tc"
  type: "InnerProduct"
  bottom: "relu3_tc"
  top: "ip1_tc"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu4_tc"
  type: "ReLU"
  bottom: "ip1_tc"
  top: "relu4_tc"
}


layer {
  name: "ip2_tc"
  type: "InnerProduct"
  bottom: "relu4_tc"
  top: "ip2_tc"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu5_tc"
  type: "ReLU"
  bottom: "ip2_tc"
  top: "relu5_tc"
}




layer {
  name: "ip3_tc"
  type: "InnerProduct"
  bottom: "relu5_tc"
  top: "theta"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 12
    weight_filler {
      type: "constant"
      value: 0
    }
    bias_filler {
      type: "file"
      file: "D:/Su/bro_Phat_guide/Color Transform/bias_init.txt"
    }
  }
}

layer {
  name: "tc_layer"
  type: "TransformColor"
  bottom: "data"
  bottom: "theta"
  top: "tc_output"
  
  tc_param {
        to_compute_dU: false
		}
  
}


################################################ END
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "tc_output"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 32
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
	  #Imagine that your weights are initially very close to 0.
		#What happens is that the signals shrink as it goes through each layer until it becomes too tiny to be useful.
		#Now if your weights are too big, the signals grow at each layer it passes through until it is too massive to be useful.
		#By using Xavier initialization, we make sure that the weights are not too small but not too big to propagate accurately the signal
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "relu1"
  type: "ReLU"
  bottom: "pool1"
  top: "relu1"
}

layer {
  name: "conv2"
  type: "Convolution"
  bottom: "relu1"
  top: "conv2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 64
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "relu2"
  type: "ReLU"
  bottom: "pool2"
  top: "relu2"
}



layer {
  name: "conv3"
  type: "Convolution"
  bottom: "relu2"
  top: "conv3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 128
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "conv3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "relu3"
  type: "ReLU"
  bottom: "pool3"
  top: "relu3"
}




layer {
  name: "ip1"
  type: "InnerProduct"
  bottom: "relu3"
  top: "ip1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 512
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "ip1"
  top: "relu4"
}

layer {
  name: "ip2"
  type: "InnerProduct"
  bottom: "relu4"
  top: "ip2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "relu5"
  type: "ReLU"
  bottom: "ip2"
  top: "relu5"
}

layer {
  name: "ip3"
  type: "InnerProduct"
  bottom: "relu5"
  top: "ip3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 10
    weight_filler {
      type: "xavier"
    }
    bias_filler {
      type: "constant"
    }
  }
}


layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "ip3"
  bottom: "label"
  top: "loss"
}
